- add beginning-of-statement fns for more languages

- sometimes prefix arg doesn't work. (find example from work)

- start using `looking-back' in emacs 22

- maybe keep sexp together only if it's not the first? and/or not the last?

      raise datastore_errors.BadArgumentError(
          'Expects parent to be an Entity or Key; received %s (a %s).' % (
          parent, typename(parent)))

    ref.add_path().set_type(kind.encode('utf-8'))
    # TODO(ryanb): let developers set arbitrary entity groups

            raise datastore_errors.Error(
              "Property %s is corrupt in the datastore; it has multiple "
               'values, but is not marked as multiply valued.' % name)


  __kind = None
  __appname = _LOCAL_APPNAME
  __search_query = None
  __orderings = []  # a list of (property_name, direction) tuples
  __cached_count = None

      raise datastore_errors.BadArgumentError(
        'Query expects a string kind; received %s (a %s).' %
        (kind, typename(kind)))

      if (self.__orderings and
          (len(self.__orderings) > 1 or self.__orderings[0][0] != property)):
        # TODO(ryanb): fully support sort orders with IN filters

    if (operator ==
        'in' and (not isinstance(values,
                                 types.ListType) or len(values) == 0)):

  # the entire select statement.
  #
  # returns three groups:
  # 1) the table name (ie kind)
  # 2) the WHERE clause
  # 2) the ORDER BY clause
  SELECT_REGEX = re.compile("""
    ^\s* SELECT \s+ \* \s+
     FROM \s+ (\w+)
     (\s+ WHERE \s+ .+?)?         # .+? matches minimally, not greedily
     (\s+ ORDER \s+ BY \s+ .+?)?  # trailing ? mean either 0 or 1 match
     \s* ;? \s* $                 # optional trailing semicolon
    """,
    re.IGNORECASE | re.VERBOSE)

      new_results = [
        e for e in new_results if e.key() not in self.__seen_keys]

  exceptions ={
    datastore_pb.Status.BAD_REQUEST: datastore_errors.BadRequestError(msg),
    datastore_pb.Status.DATASTORE_ERROR: generic,
    datastore_pb.Status.DATASTORE_UNREACHABLE: generic,
    datastore_pb.Status.ENTITY_NOT_FOUND: datastore_errors.EntityNotFoundError(
    msg), datastore_pb.Status.OTHER_ERROR: generic,
    datastore_pb.Status.QUERY_NOT_FOUND: datastore_errors.QueryNotFoundError(
    msg),
    datastore_pb.Status.TRANSACTION_NOT_FOUND: datastore_errors.TransactionNotFoundError(
    msg),

    }






MegastoreDatastore::MegastoreDatastore(const string &megastore_spec,
                                       gaia_client::GaiaExternalClient* gaia_client) : Datastore<ResultSetCursor,
  JobData>(gaia_client, "megastore")

  if (query.has_limit())
    cursor->limit = query.limit();

    CallDispatcher::get()->NotifyWhenDone(
        *rpc, ticket, CallDispatcher::get()->Wrap(*rpc, delete_cursor));

    if (query->filter_size() ==
        1) type = OnestoreEntity::PropertyType(query->filter(0).property(0));


  switch (static_cast<Query::Filter::Operator>(filter.op())) {
    case Query::Filter::LESS_THAN:
      max_inclusive = false;

  if (!query->has_limit() || query->limit() > kDatastoreMaxResults)
    count_query.set_limit(kDatastoreMaxResults);

      String[] propertyFields = {"string", "int64", "bool", "double",
                                 "raw", "point",
                                 "user"};
 
